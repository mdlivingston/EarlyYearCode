(define (main)
        ;(setPort (open (getElement ScamArgs 1) 'read))
        ;(println (apply root12 (readExpr)))
	(define (run4)
    (exprTest (no-locals
        '(define (nsq a) (define x (+ a 1)) (define y (- a 1)) (* x y)))
        '(define (nsq a) ((lambda (x y) (* x y)) (+ a 1) (- a 1)))
    )
    (exprTest (no-locals
        '(define (nsq a) (define x (+ a 1)) (define y (- a 1)) (define z a) (* x y z)))
        '(define (nsq a) ((lambda (x y z) (* x y z)) (+ a 1) (- a 1) a))
    )
    (exprTest (no-locals
        '(define (nsq a) (define (iter x) (+ a 1)) (define y (- a 1)) (* x y)))
        '(define (nsq a) ((lambda ((iter x) y) (* x y)) (+ a 1) (- a 1)))
    )
    (exprTest (no-locals '(define (f) (define x 3) 1))
        '(define (f) ((lambda (x) 1) 3))
    )
    )
	(run4)
	(println (no-locals '(if #t 0 1) (cond (#t 0) (else 1))))
        )

(define (exprTest # $expr target)
    (define result (catch (eval $expr #)))
    (println)
    (cond
        ((error? result)
            (println $expr " is EXCEPTION:")
            (println (result'value))
            (println "It should be:")
            (println target))
        (else
            (println $expr " is: ")
            (println result ", it should be: ")
            (println target)
        )
    )
    )

(define (no-locals orig)
    (define (iter curr params args)
        (define spot (car curr))
        (if (list? spot)
            (if (== (car spot) 'define)
                (if (== (length params) 0)
                    (if (== (length args) 0)
                        (iter (cdr curr) (list (cadr spot)) (list (caddr spot)))
                        (iter (cdr curr) (list (cadr spot)) (append args (list (caddr spot))))
                    )
                    (if (== (length args) 0)
                        (iter (cdr curr) (append params (list (cadr spot))) (list (caddr spot)))
                        (iter (cdr curr) (append params (list (cadr spot))) (append args (list (caddr spot))))
                    )
                )
                (append (list (list 'lambda params spot)) args)
            )
            (append (list (list 'lambda params spot)) args)
        )
    )
    (list (car orig) (cadr orig) (iter (cddr orig) '() '()))
)
