(define (main)
  (setPort (open (getElement ScamArgs 1) 'read))
  (define num3 (lambda (f) (lambda (x) x)))
  ;(inspect num3)
  (define num4 (lambda (f) (lambda (x) (f x))))
  ;(inspect num4)
  (define (inc x) (+ x 1))
  (define num1  (readExpr))
  (set! num1 (eval num1 this))
  ;(inspect num1)
  (define num2  (readExpr))
  (set! num2 (eval num2 this))
  ;(inspect num2)
  (define inc  (readExpr))
  (set! inc (eval inc this))
  ;(inspect inc)
  (define base  (readExpr))
  (set! base (eval base this))
  ;(inspect base)
  (println (((cadd num1 num2) inc) base))
  (println (((cmult num1 num2) inc) base))
)

(define (increment number)
        (lambda (incrementer)
            (define (resolver base)
                (incrementer ((number incrementer) base))
                )
            resolver
            )
        )

(define (cadd a b)
  (lambda (f)
    (lambda (x)
      ; use the result of b as the base for a
      ((a f)((b f) x))
      )
    )
  )

(define (cmult a b)
  (lambda (f)
    (lambda (x)
      ((a (b f)) x)
      )
    )
  )

;(define (cpow a b)
 ; (b a) ; that is way to easy to take me as long as it did to figure out
 ; )
