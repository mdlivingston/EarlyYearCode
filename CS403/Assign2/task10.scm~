(define (main)
    (define (exec num1 num2)
        (println (+ num1 num2))
        (println (- num1 num2))
        (println (* num1 num2))
        (println (/ num1 num2))
    )
    (setPort (open (getElement ScamArgs 1) 'read))
    (exec (readExpr) (readExpr))
)

(define old+ +)
(define old- -)
(define old* *)
(define old/ /)

(define (lessthan a b)
    (if (< (length a) (length b))
        (lessthan (append a '(0)) b)
        a
    )
)

(define (removeZeros input)
        (if (= 0 (car input))
            (removeZeros (cdr input))
            input
        )
)
 
(define (compare a b)
    (define (compare-iter a b)
        (cond
            ((null? b) 1)
            ((null? a) -1)
            ((equal? (car a) '-) (compare-iter (cdr a) b))
            ((equal? (car b) '-) (compare-iter a (cdr b)))
            ((equal? a b) 0)
            ((> (length a) (length b)) 1)
            ((< (length a) (length b)) -1)
            ((> (car a) (car b)) 1)
            ((< (car a) (car b)) -1)
            (else (compare-iter (cdr a) (cdr b)))
        )
    )
    (compare-iter a b)
)

(define (pad a b)
    (if (< (length a) (length b))
        (pad (append a '(0)) b)
        a
    )
)
 
(define (rbig+ augend addend)
    (define (add augend addend carry output)
        (if (null? augend)
            (if (> carry 0)
                (cons 1 output)
                output
            )
            (if (> 10 (old+ (car addend) (car augend) carry))
                (add (cdr augend) (cdr addend) 0 (cons (old+ (car addend) (car augend) carry) output))
                (add (cdr augend) (cdr addend) 1 (cons (old- (old+ (car addend) (car augend) carry) 10) output))
            )
        )
    )
    (if (not (= (length augend) (length addend)))
        (rbig+ (lessthan augend addend) (lessthan addend augend))
        (add augend addend 0 '())
    )
)
 
(define (rbig- subtrahend minuend)
    (define (subtract subtrahend minuend output)
        (if (or (null? subtrahend) (and (equal? subtrahend '(0)) (equal? minuend '(0))))
            (removeZeros output)
            (if (< (car subtrahend) (car minuend))
                (subtract (cons (old+ (car subtrahend) 10) (cons (old- (cadr subtrahend) 1) (cddr subtrahend))) minuend output)
                (subtract (cdr subtrahend) (cdr minuend) (cons (old- (car subtrahend) (car minuend)) output))
            )
        )
    )
    (if (not (= (length subtrahend) (length minuend)))
        (rbig- (lessthan subtrahend minuend) (lessthan minuend subtrahend))
        (subtract subtrahend minuend '())
    )
)
 
(define (rbig* multiplicand multiplier)
    (define (outerloop multiplierList resultList)
        (define (innerloop num multiplicandList carry output)
            (if (null? multiplicandList)
                (if (< 0 carry)
                    (append output (list carry))
                    output
                )
                (innerloop num (cdr multiplicandList) (old/ (old+ (old* num (car multiplicandList)) carry) 10) (append output (list (% (old+ (old* num (car multiplicandList)) carry) 10))))
            )
        )
        (if (null? multiplierList)
            resultList
            (outerloop (cdr multiplierList) (append resultList (list (innerloop (car multiplierList) multiplicand 0 '()))))
        )
    )
    (define (addZeros n inlist outlist)
        (define (zeroLoop n ls)
            (if (= n 0)
                ls
                (zeroLoop (old- n 1) (cons 0 ls))
            )
        )
        (if (null? inlist)
            outlist
            (addZeros (old+ n 1) (cdr inlist) (append outlist (list (zeroLoop n (car inlist)))))
        )
    )
    (define (adder inlist total)
        (if (null? inlist)
            total
            (adder (cdr inlist) (reverse (rbig+ (car inlist) total)))
        )
    )
 
    (reverse (adder (addZeros 0 (outerloop multiplier '()) '()) '(0)))
)
(define (rbig/ dividend divisor)
    (define (iterate dendList tempDend output)
        (define (modifyLists count remain)
            (if (equal? remain '(0))
                (iterate dendList '() (append output (list count)))
                (iterate (append remain dendList) '() (append output (list count)))
            )
        )
 
        (define (count ogNumber stopHere curTotal i)
            (if (> 1 (compare (big+ ogNumber curTotal) stopHere))
                (count ogNumber stopHere (big+ ogNumber curTotal) (old+ i 1))
                (modifyLists i (big- stopHere curTotal))
            )
        )

        (if (and (= 1 (compare divisor dendList)) (null? tempDend))
            output
            (if (and (not (null? dendList)) (= 0 (car dendList)) (null? tempDend)) 
                (iterate (cdr dendList) tempDend (append output '(0)))
                (if (= 1 (compare divisor tempDend))
                    (iterate (cdr dendList) (append tempDend (list (car dendList))) output)
                    (count divisor tempDend '(0) 0)
                )   
            )
        )
    )
   
    (if (equal? divisor '(0))
        (throw 'DIVISION_BY_ZERO "zero divisor")
        (iterate dividend '() '())
    )
)

(define (big+ augend addend)
    (if (and (equal? (car augend) '-) (equal? (car addend) '-))
        (cons '- (rbig+ (reverse (cdr augend)) (reverse (cdr addend))))
        (if (and (not (equal? (car augend) '-)) (not (equal? (car addend) '-)))
            (rbig+ (reverse augend)(reverse addend))
            (cond
                ((< 0 (compare augend addend))
                    (if (equal? (car augend) '-)
                        (cons '- (big- (cdr augend) addend))
                        (big- augend (cdr addend))
                    )
                )
                ((= 0 (compare augend addend)) '(0))
                (else
                    (big+ addend augend)
                )
            )
        )
    )
)
 
(define (big- subtrahend minuend)
    (define (flipSign x)
        (if (equal? (car x) '-)
            (cdr x)
            (cons '- x)
        )
    )
    (cond
        ((equal? subtrahend minuend) '(0))
        ((or (> 1 (compare subtrahend minuend)) (equal? (car subtrahend) '-) (equal? (car minuend) '-))
            (big+ subtrahend (flipSign minuend))
        )
        (else
            (rbig- (reverse subtrahend) (reverse minuend))
        )
    )
) 

(define (big* multiplicand multiplier)
    (if (or (equal? multiplicand '(0)) (equal? multiplier '(0)))
        '(0)
        (if (equal? (car multiplicand) '-)
            (if (equal? (car multiplicand) '-)
                (rbig* (reverse (cdr multiplicand)) (reverse (cdr multiplier)))
                (cons '- (rbig* (reverse (cdr multiplicand)) (reverse multiplier)))
            )
            (if (equal? (car multiplier) '-)
                (cons '- (rbig* (reverse multiplicand) (reverse (cdr multiplier))))
                (rbig* (reverse multiplicand) (reverse multiplier))
            )
        )
    )
)
 
(define (big/ dividend divisor)
    (if (= 1 (compare divisor dividend)) 
        '(0)
        (if (equal? (car dividend) '-)
            (if (equal? (car divisor) '-)
                (rbig/ (cdr dividend) (cdr divisor))
                (cons '- (rbig/ (cdr dividend) divisor))
            )
            (if (equal? (car divisor) '-)
                (cons '- (rbig/ dividend (cdr divisor)))
                (rbig/ dividend divisor)
            )
        )
    )
)
 
 
 
(define (int2list input)
    (define (iterate input output dplace)
        (if (= dplace 0)
            output
            (if (and (null? output) (= 0 (old/ input dplace)))
                (iterate input output (old/ dplace 10))
                (iterate (% input dplace) (append output (list (old/ input dplace))) (old/ dplace 10))
            )
        )
    )
 
    (cond
        ((= input 0)
            '(0)
        )
        ((> 0 input)
            (cons '- (iterate (old* -1 input) '() 10000))
        )
        (else
            (iterate input '() 10000)
        )
    )
)
 
(define (list2int input)
    (define (iterate input output dplace)
        (if (null? input)
            (if (= dplace 0)
                output
                (old/ output (old* 10 dplace))
            )
            (iterate (cdr input) (old+ output (old* dplace (car input))) (old/ dplace 10))
        )
    )
    (if (equal? (car input) '-)
        (old* -1 (iterate (cdr input) 0 10000))
        (iterate input 0 10000)
    )
)
 
(define (enlarge input)
    (if (atom? input)
        (int2list input)
        input
    )
)
 
(define (normalForm input)
    (if (equal? (car input) '-)
        (if (< 0 (compare '(3 2 7 6 9) input))
            (list2int input)
            input
        )
        (if (< 0 (compare '(3 2 7 6 8) input))
            (list2int input)
            input
        )
    )
)
 
(define (+ y z)
    (normalForm (big+ (enlarge y) (enlarge z)))
)
 
(define (- y z)
    (normalForm (big- (enlarge y) (enlarge z)))
)
 
(define (* y z)
    (normalForm (big* (enlarge y) (enlarge z)))
)
 
(define (/ y z)
    (normalForm (big/ (enlarge y) (enlarge z)))
)
