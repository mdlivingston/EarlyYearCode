(define (main)
   (setPort (open (getElement ScamArgs 1) 'read))
   (define f (readExpr))
   (println (infix->postfix f))
  ; (inspect (infix->postfix (quote (2 + 3 * x ^ 5 + a))))
   
   )
  

(define (infix->postfix Expr)
  
  (define (rank sym)
    (cond 
     ((eq? sym '+) 1)
     ((eq? sym '-) 2)
     ((eq? sym '*) 3)
     ((eq? sym '/) 4)
      ((eq? sym '^) 5)
      (else 0)
      )
    )
  
  (define (isOperator op)
  (cond
     ((eq? op '+) #f)
     ((eq? op '-) #f)
     ((eq? op '*) #f)
     ((eq? op '/) #f)
      ((eq? op '^) #f)
      (else #t))
      )

; Adds an element to the front of a S
  (define (push S el)
    (if (null? S)
        (list el)
        (append (list el) S)
	)
    )

    (define (iter in out ops)
     ; (println in " : " out " : " ops)
     ; (inspect (isOperator (car in))) 
        (if (null? in)
             (reverse (append (reverse ops) out))
            (cond
                ((integer? (car in))
                    (iter (cdr in) (push out (car in)) ops)
		    )
		((== (isOperator (car in)) #t )
		 (iter (cdr in) (push out (car in)) ops)
		 )
                ((symbol? (car in))
		; (inspect ops)
                    (if (null? ops)
                        (iter (cdr in) out (push ops (car in)))
                        (if (>  (rank (car in)) (rank (car ops)))
                            (iter (cdr in) out (push ops (car in)))
                            (iter in (push out (car ops)) (cdr ops))
                        )
                    )
                )
            )
        )
    )
    (iter  Expr nil nil)
   ; (println (reverse (fringe (car (emptyStack out (reverse ops))))))
    )

;(if (null? in)
           ; (println (car (emptyStack out ops)))
           ; (cond
              ;  ((integer? (car in))
              ;      (iter (cdr in) (push out (car in)) ops)
              ;  )
              ;  ((symbol? (car in))
                  ;  (if (null? ops)
;                        (iter (cdr in) out (push ops (car in)))
 ;                       (if (checkPrec (car in) (car ops))
  ;                          (iter (cdr in) out (push ops (car in)))
   ;                         (iter in (makeExpr out (car ops)) (cdr ops))
    ;                    )
     ;               )
      ;          )
       ;     )
        ;)
