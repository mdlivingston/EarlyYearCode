
(define (main)
    (setPort (open (getElement ScamArgs 1) 'read))
    (define velocity (readExpr))
    (define latitude (readExpr))
    (define V (make-connector))
    (define L (make-connector))
    (define H (make-connector))
    (speed V L H)
    (set-value! V velocity 'user)
    (set-value! L latitude 'user)
    (define height (get-value H))
    (println "the drop height should be around " (fmt "%.12f" height) " feet")
)

(define (error @)
    (println)
    (apply println @)
)

(define (speed vel lat height)
    (let (
            (a (make-connector))
            (b (make-connector))
            (c (make-connector))
            (d (make-connector))
            (e (make-connector))
            (f (make-connector))
            (g (make-connector))
            (h (make-connector))
            (i (make-connector))
            (j (make-connector))
        )
        (multiplier lat a b)
        (cosine b c)
        (multiplier c d e)
        (adder e g f)
        (met-feet-conv height h)
        (multiplier h g i)
        (sq-sqrt j i)
        (furfort-metsec-conv vel j)
        (constant (/ 3.14159265358979323846 90) a)
        (constant .052 d)
        (constant 19.612 f)

        'ok
    )
)

(define (has-value? connector)
    (connector 'has-value?)
)
(define (get-value connector)
    (connector 'value)
)
(define (set-value! connector new-value informant)
    ((connector 'set-value!) new-value informant)
)
(define (forget-value! connector retractor)
    ((connector 'forget) retractor)
)
(define (connectThisThangg connector new-constraint)
    ((connector 'connectThisThangg) new-constraint)
)
(define (inform-about-value constraint)
    (constraint 'I-have-a-value)
)
(define (inform-about-no-value constraint)
    (constraint 'I-lost-my-value)
)


(define (cosine in out)
    (define (process-new-value)
        (if (has-value? in) 
            (set-value! out (cos (get-value in)) tempError)
            (if (has-value? out)
                (set-value! in (atan 1 (/ (get-value out) (sqrt (- 1 (^ (get-value out) 2))))) tempError)
            )
        )
    )
    (define (process-forget-value)
        (forget-value! in tempError)
        (forget-value! out tempError)
        (process-new-value)
    )
    (define (tempError request)
        (if (eq? request 'I-have-a-value)
            (process-new-value)
            (if (eq? request 'I-lost-my-value)
                (process-forget-value)
                (error "Unknown request -- COSINE" request)
            )
        )
    )
    (connectThisThangg in tempError)
    (connectThisThangg out tempError)
    tempError

)

(define (furfort-metsec-conv a b)
    (define conv 6012.88475304223335719399)
    (define (process-new-value)
        (if (has-value? a)
            (set-value! b (/ (get-value a) conv) tempError)
            (if (has-value? b)
                (set-value! a (* (get-value b) conv) tempError)
            )   

        )
    )
    (define (process-forget-value)
        (forget-value! a tempError)
        (forget-value! b tempError)
        (process-new-value)
    )
    (define (tempError request)
        (if (eq? request 'I-have-a-value)
            (process-new-value)
            (if (eq? request 'I-lost-my-value) 
                (process-forget-value)
                (error "Unknown request -- FURFORT" request)
            )
        )
    )
    (connectThisThangg a tempError)
    (connectThisThangg b tempError)
    tempError
)

(define (met-feet-conv a b)
    (define conv 3.28083989501312335958)
    (define (process-new-value)
        (if (has-value? a)
            (set-value! b (/ (get-value a) conv) tempError)
            (if (has-value? b)
                (set-value! a (* (get-value b) conv) tempError)
            )
        )
    )
    (define (process-forget-value)
        (forget-value! a tempError)
        (forget-value! b tempError)
        (process-new-value)
    )
    (define (tempError request)
        (if (eq? request 'I-have-a-value) 
            (process-new-value)
            (if (eq? request 'I-lost-my-value)
                (process-forget-value)
                (error "Unknown request -- METFEET" request)
            )
        )
    )
    (connectThisThangg a tempError)
    (connectThisThangg b tempError)
    tempError
)

(define (sq-sqrt a b)
    (define (process-new-value)
        (if (has-value? a)
            (set-value! b (* (get-value a) (get-value a)) tempError)
            (if (has-value? b)
                (set-value! a (sqrt (get-value b)) tempError)
            )

        )
    )
    (define (process-forget-value)
        (forget-value! a tempError)
        (forget-value! b tempError)
        (process-new-value)
    )
    (define (tempError request)
        (if (eq? request 'I-have-a-value) 
            (process-new-value)
            (if (eq? request 'I-lost-my-value)
                (process-forget-value)
                (error "Unknown request -- SQ-SQRT" request)
            )
        ) 
    )
    (connectThisThangg a tempError)
    (connectThisThangg b tempError)
    tempError
)

(define (adder a1 a2 sum)
    (define (process-new-value)
        (if (and (has-value? a1) (has-value? a2))
            (set-value! sum (+ (get-value a1) (get-value a2)) tempError)
            (if (and (has-value? a1) (has-value? sum))
                (set-value! a2 (- (get-value sum) (get-value a1)) tempError)
                (if (and (has-value? a2) (has-value? sum)) 
                    (set-value! a1 (- (get-value sum) (get-value a2)) tempError)
                )

            )
        )
    )
    (define (process-forget-value)
        (forget-value! sum tempError)
        (forget-value! a1 tempError)
        (forget-value! a2 tempError)
        (process-new-value)
    )
    (define (tempError request)
        (if (eq? request 'I-have-a-value)
            (process-new-value)
            (if (eq? request 'I-lost-my-value)
                (process-forget-value)
                (error "Unknown request -- ADDER" request)
            )

        )
 
    ) 
    (connectThisThangg a1 tempError)
    (connectThisThangg a2 tempError)
    (connectThisThangg sum tempError)
    tempError
)

(define (multiplier m1 m2 product)
    (define (process-new-value)
        (if (or (and (has-value? m1) (= (get-value m1) 0)) (and (has-value? m2) (= (get-value m2) 0)))
            (set-value! product 0 tempError)
            (if (and (has-value? m1) (has-value? m2))
                (set-value! product (* (get-value m1) (get-value m2)) tempError)
                (if (and (has-value? product) (has-value? m1))
                    (set-value! m2 (/ (get-value product) (get-value m1)) tempError)
                    (if (and (has-value? product) (has-value? m2))
                        (set-value! m1 (/ (get-value product) (get-value m2)) tempError)
                    )

                )
            )
        )
    )

    (define (process-forget-value)
        (forget-value! product tempError)
        (forget-value! m1 tempError)
        (forget-value! m2 tempError)
        (process-new-value)
    )

    (define (tempError request)
        (if (eq? request 'I-have-a-value)
            (process-new-value)
            (if (eq? request 'I-lost-my-value)
                (process-forget-value)
                (error "Unknown request -- MULTIPLIER" request)
            )
        )
    )

    (connectThisThangg m1 tempError)
    (connectThisThangg m2 tempError)
    (connectThisThangg product tempError)
    tempError
)

(define (constant value connector)
    (define (tempError request)
        (error "Unknown request -- CONSTANT" request)
    )
    (connectThisThangg connector tempError)
    (set-value! connector value tempError)
    tempError
)

(define (make-connector)
    (let(
            (value #f) 
            (informant nil) 
            (constraints '())
        )
        (define (set-my-value newval setter)
            (if (not (has-value? tempError)) 
                (begin
                    (set! value newval)
                    (set! informant setter)
                    (for-remove setter inform-about-value constraints)
                )
                (if (not (= value newval))
                    (error "Contradiction" (list value newval))
                    'ignored
                )
            )
        )

        (define (forget-my-value retractor)
            (if (eq? retractor informant)
                (begin 
                    (set! informant nil)
                    (for-remove retractor inform-about-no-value constraints)
                )
                'ignored
            )
        )

        (define (connectThisThangg new-constraint)
            (if (not (member? new-constraint constraints))
                (set! constraints (cons new-constraint constraints))
            )
            (if (has-value? tempError)
                (inform-about-value new-constraint)
            )
            'done
        )

        (define (tempError request)
            (if (eq? request 'has-value?)
                (if (valid? informant)
                    #t
                    #f
                )
                (if (eq? request 'value)
                    value
                    (if (eq? request 'set-value!)
                        set-my-value
                        (if (eq? request 'forget)
                            forget-my-value
                            (if (eq? request 'connectThisThangg)
                                connectThisThangg
                                (error "Unknown operation -- CONNECTOR" request)
                            )

                        )
                    )
                )
            )
        )
        tempError
    )
)

(define (for-remove exception procedure list)
    (define (loop items)
        (if (null? items)
            'done
            (if (eq? (car items) exception)
                (loop (cdr items))
                (begin
                    (procedure (car items))
                    (loop (cdr items))
                )
            )

        )
    )
    (loop list)
)
