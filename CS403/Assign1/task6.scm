(define (main)
        (setPort (open (getElement ScamArgs 1) 'read))
	(define f (readExpr))
        (define first (readExpr))
        (define second (readExpr))
        (define third (readExpr))
        (define f1 (apply pfa (cons (eval f this) first)))
        (define f2 (apply f1 second))
        (define f3 (apply f2 third))
        (inspect (length (get 'parameters f1)))
	;(println "(length (get (quote parameters) f2)) is " (length third))
        (inspect (length (get 'parameters f2)))
        (println f3)
        )

(define (pfa f k)
  (cond
    ((= k 1) 
     (lambda (x) (lambda (@) (apply f (cons x @)))))
    ((= k 2) 
     (lambda (x y) (lambda (@) (apply f (cons x (cons y @))))))
    ((= k 3) 
     (lambda (x y z) (lambda(@) (apply f (cons x (cons y (cons z @)))))))
    )
  )
